{
	"info": {
		"_postman_id": "2d176094-44b5-45f9-899a-93b183c187fa",
		"name": "Parse CSV and make assertions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23471881"
	},
	"item": [
		{
			"name": "Setup",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"PapaLibrary\", responseBody);"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://raw.githubusercontent.com/mholt/PapaParse/master/papaparse.min.js",
					"protocol": "https",
					"host": [
						"raw",
						"githubusercontent",
						"com"
					],
					"path": [
						"mholt",
						"PapaParse",
						"master",
						"papaparse.min.js"
					]
				}
			},
			"response": []
		},
		{
			"name": "SOLUTION",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// 1. Setup",
							"eval(pm.globals.get(\"PapaLibrary\"));",
							"var Papa = this.Papa;",
							"",
							"// 2. Configure Papa",
							"const parserConfig = {\t",
							"    header: true",
							"};",
							"",
							"",
							"// 3. Parse the response body",
							"var parsedBody = Papa.parse(responseBody, parserConfig);",
							"console.log(parsedBody);",
							"",
							"// 4. Tests",
							"pm.test(\"ABC1234 was charged properly\", function () {",
							"    for (let invoice of parsedBody.data) {",
							"        console.log(invoice);",
							"        if (invoice.ResHash === 'ABC1234') {",
							"            pm.expect(invoice.InvTotal).to.eql(\"$3,500.00\");",
							"        }",
							"    }",
							"});",
							"",
							"",
							"// 5. Clean-up",
							"pm.globals.unset(\"PapaLibrary\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.mocky.io/v2/5aaadf55330000b43e2dabab",
					"protocol": "http",
					"host": [
						"www",
						"mocky",
						"io"
					],
					"path": [
						"v2",
						"5aaadf55330000b43e2dabab"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.globals.get(\"PapaLibrary\"));\r",
							"let Papa = this.Papa\r",
							"\r",
							"const parserConfig = {\r",
							"    header: true //to parse the header as well\r",
							"}\r",
							"\r",
							"let parsedBody = Papa.parse(responseBody, parserConfig);\r",
							"console.log(parsedBody)\r",
							"\r",
							"pm.test(\"ABC1234 was charged properly\", () => {\r",
							"    for(let invoice of parsedBody.data) {\r",
							"    console.log(invoice);\r",
							"    if (invoice.ResHash === \"ABC1234\") {\r",
							"        pm.expect(invoice.InvTotal).to.eql(\"$4,500.00\")}\r",
							"    }\r",
							"})\r",
							"\r",
							"pm.globals.unset(\"PapaLibrary\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.mocky.io/v2/5aaadf55330000b43e2dabab",
					"protocol": "http",
					"host": [
						"www",
						"mocky",
						"io"
					],
					"path": [
						"v2",
						"5aaadf55330000b43e2dabab"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "foo",
			"value": "bar",
			"type": "string"
		}
	]
}